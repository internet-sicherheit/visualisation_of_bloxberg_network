{"version":3,"sources":["modules/address_viewer/code/model/AddressManager.js","modules/address_viewer/code/model/Transaction.js","modules/address_viewer/code/DataFetcher.js","modules/address_viewer/code/TableCreator.js","modules/address_viewer/code/AddressViewer.js","modules/vbn/code/DataCollector.js","modules/vbn/code/GraphCreator.js","modules/vbn/code/VBN.js","App.js","serviceWorker.js","index.js"],"names":["AddressManager","address","name","type","status","transactionMap","this","Map","console","log","map","array","value","get","senderAddress","set","senderName","receiverAddress","receiverName","txCount","obj","push","addresses","transactions","k","sortingMode","addressType","sortedArray","length","element","i","localeCompare","index","indexOf","splice","timeStamp","Transaction","transactionHash","input","senderStatus","receiverStatus","DataFetcher","props","Web3Url","URLTransactionList","URLTransactionInfo","addressLookUpMap","web3Url","URLContractSourceCode","initAddressManager","addressManager","saveTransactions","isContract","isVerifiedContract","isVerified","getContractName","contractName","getAccountName","accountName","adderss","fetch","then","response","json","result","resolvedAddress","getTransactions","Object","keys","resultArray","hash","from","lookUpName","to","percent","Math","round","document","getElementById","innerHTML","style","width","Web3","require","web3","providers","HttpProvider","eth","getCode","ContractName","text","httpText","match","substring","React","Component","TableCreator","url_website","url_bloxberg_tx","url_bloxberg_addr","MODE_SUMMARY","MODE_ALLTRANSACTIONS","MODE_SELECTEDTRANSACTIONS","sortMode","sortButton","PAGE_FIRST","PAGE_LAST","PAGE_INCREASE","PAGE_DECREASE","htmlCode","responseObject","promise","transactionList","mode","page","pageFaktor","checkedAddresses","renderTableSummary","maxPages","floor","getMaxPages","pageControl","renderTableAllTransactions","renderTableSelectedTransactions","resetMap","getTransactionSummaryMap","sortByAddress","sortByTxCount","setPageButtons","addToHTMLCode","rowCounterEnd","getRowCounterEnd","rowCounterStart","getRowCounterStart","isChecked","trRow","backgroundColor","addListenerToCheckBoxes","addTableSortButtonSender","addTableSortButtonReceiver","addTableSortButtonTxCount","getAllTransactions","sortByTimeStamp","convertTime","parseInt","addTableSortButtonTimeStamp","getTransactionsForAddress","code","pageButtons","getElementsByClassName","checkBoxes","addEventListener","event","currentTarget","checked","delete","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","scrollIntoView","behavior","block","inline","show","infoElements","display","showInformation","showLoader","showTable","fetchData","renderData","scrollAnimation","nextProps","class","id","onClick","renderTable","AddressViewer","state","query","location","search","addr","queryString","parse","setState","table","className","placeholder","autoFocus","window","alert","DataCollector","tempMap","offset","depth","setLoadingbar","getContractList","contractList","getTransactionFromContractList","copyMap","deepSearch","convertMapToArray","url","counter","contract","Address","arrays","mapContains","source","target","sourceType","targetType","p","entry","size","addCounter","temp","forEach","key","sourceMap","x","y","has","prozent","GraphCreator","zoomEnable","graphBoxHeight","innerHeight","offsetHeight","height","innerWidth","links","nodes","link","nodeAddress","typeSource","typeTarget","svgWidth","offsetWidth","svgHeight","zoom","d3","on","svg","attr","translate","scale","append","call","force","e","node","d","drag","linkDistance","charge","start","selectAll","data","enter","select","now","startTime","endTime","visibility","onresize","getElementsByTagName","timeStap","getData","hideLoader","createGraph","calculationTime","widthResizeListener","VBN","graph","pageSelectOptions","offsetSelectOptions","depthSelectOptions","href","rel","defaultValue","App","basename","path","exact","component","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84027e6f.chunk.js","sourcesContent":["export default class AddressManager {\r\n\r\n    address = null;\r\n    name = null;\r\n    type = null;\r\n    status = null;\r\n\r\n    transactionMap = null;\r\n\r\n    constructor(address, name, type, status) {\r\n        this.address = address;\r\n        this.name = name;\r\n        this.type = type;\r\n        this.status = status;\r\n\r\n        this.transactionMap = new Map();\r\n    }\r\n\r\n    getTransactionSummaryMap() {\r\n\r\n        console.log(\"    getTransactionSummaryMap:\");\r\n\r\n        let map = new Map();\r\n        let array = [];\r\n\r\n        // Save to map to avoid duplicates\r\n        for (let [key, value] of this.transactionMap) {\r\n            //console.log(key, value);\r\n            if (typeof map.get(value.senderAddress) === 'undefined') {\r\n                map.set(value.senderAddress, { senderAddress: value.senderAddress, senderName: value.senderName, receiverAddress: value.receiverAddress, receiverName: value.receiverName, txCount: 1 });\r\n            } else {\r\n                let obj = map.get(value.senderAddress);\r\n                map.set(value.senderAddress, { senderAddress: value.senderAddress, senderName: value.senderName, receiverAddress: value.receiverAddress, receiverName: value.receiverName, txCount: obj.txCount + 1 });\r\n            }\r\n        }\r\n        // Save result map to array for index usability\r\n        for (let [key, value] of map) {\r\n            array.push(value);\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    getTransactionsForAddress(addresses) {\r\n\r\n        console.log(\"    getTransactionsForAddress:\");\r\n\r\n        let transactions = [];\r\n\r\n        // Save result map to array for index usability\r\n        for (let [k, v] of addresses) {\r\n\r\n            for (let [key, value] of this.transactionMap) {\r\n                //console.log(key, value);\r\n                if (value.senderAddress === k) {\r\n                    transactions.push(value);\r\n\r\n                }\r\n            }\r\n        }\r\n        return transactions;\r\n    }\r\n\r\n    getAllTransactions() {\r\n\r\n        console.log(\"    getAllTransactions:\");\r\n\r\n        let transactions = [];\r\n\r\n        for (let [key, value] of this.transactionMap) {\r\n            //console.log(key, value);\r\n            transactions.push(value);\r\n        }\r\n\r\n        return transactions;\r\n    }\r\n\r\n    sortByAddress(sortingMode, addressType, array) {\r\n        console.log(\"sortByAddress mode \" + sortingMode);\r\n\r\n        let sortedArray = [];\r\n\r\n        switch (sortingMode) {\r\n            case \"desc\": // big to small\r\n\r\n                while (array.length > 0) {\r\n                    let element = array[0];\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        \r\n                        let address = null;\r\n                        if(addressType === \"sender\") {\r\n                            address = array[i].senderAddress;\r\n                        }\r\n                        if(addressType === \"receiver\") {\r\n                            address = array[i].receiverAddress;\r\n                        }\r\n\r\n                        if (element.senderAddress.localeCompare(address) === -1) { // element > arrayElement\r\n                            element = array[i];\r\n                        }\r\n                    }\r\n                    sortedArray.push(element);\r\n\r\n                    let index = array.indexOf(element);\r\n                    if (index > -1) {\r\n                        array.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"asc\": // small to big\r\n\r\n                while (array.length > 0) {\r\n                    let element = array[0];\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        \r\n                        let address = null;\r\n                        if(addressType === \"sender\") {\r\n                            address = array[i].senderAddress;\r\n                        }\r\n                        if(addressType === \"receiver\") {\r\n                            address = array[i].receiverAddress;\r\n                        }\r\n\r\n                        if (element.senderAddress.localeCompare(address) === 1) { // element < arrayElement\r\n                            element = array[i];\r\n                        }\r\n                    }\r\n                    sortedArray.push(element);\r\n\r\n                    let index = array.indexOf(element);\r\n                    if (index > -1) {\r\n                        array.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        console.log(sortedArray);\r\n\r\n        return sortedArray;\r\n    }\r\n\r\n    sortByTxCount(sortingMode, array) {\r\n        console.log(\"sortByTxCount mode \" + sortingMode);\r\n\r\n        let sortedArray = [];\r\n\r\n        switch (sortingMode) {\r\n            case \"desc\":\r\n\r\n                while (array.length > 0) {\r\n                    let element = array[0];\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        if (element.txCount > array[i].txCount) { // element > arrayElement\r\n                            element = array[i];\r\n                        }\r\n                    }\r\n                    sortedArray.push(element);\r\n\r\n                    let index = array.indexOf(element);\r\n                    if (index > -1) {\r\n                        array.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"asc\":\r\n\r\n                while (array.length > 0) {\r\n                    let element = array[0];\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        if (element.txCount < array[i].txCount) { // element < arrayElement\r\n                            element = array[i];\r\n                        }\r\n                    }\r\n                    sortedArray.push(element);\r\n\r\n                    let index = array.indexOf(element);\r\n                    if (index > -1) {\r\n                        array.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        console.log(sortedArray);\r\n\r\n        return sortedArray;\r\n    }\r\n\r\n    sortByTimeStamp(sortingMode, array) {\r\n        console.log(\"sortByTimeStamp \" + sortingMode);\r\n\r\n        let sortedArray = [];\r\n\r\n        switch (sortingMode) {\r\n            case \"desc\":\r\n\r\n                while (array.length > 0) {\r\n                    let element = array[0];\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        if (element.timeStamp >= array[i].timeStamp) { // element > arrayElement\r\n                            element = array[i];\r\n                        }\r\n                    }\r\n                    sortedArray.push(element);\r\n\r\n                    let index = array.indexOf(element);\r\n                    if (index > -1) {\r\n                        array.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n            case \"asc\":\r\n\r\n                while (array.length > 0) {\r\n                    let element = array[0];\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        if (element.timeStamp <= array[i].timeStamp) { // element < arrayElement\r\n                            element = array[i];\r\n                        }\r\n                    }\r\n                    sortedArray.push(element);\r\n\r\n                    let index = array.indexOf(element);\r\n                    if (index > -1) {\r\n                        array.splice(index, 1);\r\n                    }\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        console.log(sortedArray);\r\n\r\n        return sortedArray;\r\n    }\r\n}","export default class Transaction {\r\n\r\n    transactionHash = null;\r\n\r\n    senderAddress = null;\r\n    senderName = null;\r\n    senderStatus = null;\r\n\r\n    receiverAddress = null;\r\n    receiverName = null;\r\n    receiverStatus = null;\r\n\r\n    timeStamp = null;\r\n    input = null;\r\n\r\n    constructor(transactionHash, senderAddress, senderName, receiverAddress, receiverName, timeStamp, input) {\r\n        this.transactionHash = transactionHash;\r\n        this.senderAddress = senderAddress;\r\n        this.senderName = senderName;\r\n        this.receiverAddress = receiverAddress;\r\n        this.receiverName = receiverName;\r\n        this.timeStamp = timeStamp;\r\n        this.input = input;\r\n\r\n        this.senderStatus = (this.senderAddress === this.senderName) ? \"not verified\" : \"verified\";\r\n        this.receiverStatus = (this.receiverAddress === this.receiverName) ? \"not verified\" : \"verified\";\r\n    }\r\n}","import React from 'react';\r\nimport AddressManager from './model/AddressManager';\r\nimport Transaction from './model/Transaction';\r\n\r\nclass DataFetcher extends React.Component {\r\n\r\n    Web3Url = null;\r\n    URLTransactionList = null;\r\n    URLTransactionInfo = null;\r\n\r\n    addressLookUpMap = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.web3Url = \"https://core.bloxberg.org/\";\r\n        this.URLTransactionList = \"https://blockexplorer.bloxberg.org/api/api?module=account&action=txlist&address=\";\r\n        this.URLTransactionInfo = \"https://blockexplorer.bloxberg.org/api/api?module=transaction&action=gettxinfo&txhash=\";\r\n        this.URLContractSourceCode = \"https://blockexplorer.bloxberg.org/api/api?module=contract&action=getsourcecode&address=\";\r\n\r\n        this.addressLookUpMap = new Map();\r\n    }\r\n\r\n    async fetchData(address) {\r\n\r\n        /* console.log(\"getAddressName\");\r\n        console.log(await this.getAccountName(\"0xE5a9654C7e190701016EBf18206020bf16D8Beab\"));\r\n        console.log(\"getTransactions\");\r\n        console.log(await this.getTransactions(\"0xE5a9654C7e190701016EBf18206020bf16D8Beab\"));\r\n        console.log(\"getTransacitonInfo\");\r\n        console.log(await this.getTransactionInfo(\"0x7aa439813cc35a3bf7d5802f0732bb5fef37173f09ef3146a6755df5692a58fe\"));\r\n        console.log(\"isContract?\");\r\n        console.log(await this.isContract(\"0xE5a9654C7e190701016EBf18206020bf16D8Beab\"));\r\n        console.log(\"isVerifiedContract?\");\r\n        console.log(await this.isVerifiedContract(\"0xE5a9654C7e190701016EBf18206020bf16D8Beab\"));\r\n        console.log(\"getContractName\");\r\n        console.log(await this.getContractName(\"0xE5a9654C7e190701016EBf18206020bf16D8Beab\")); */\r\n\r\n        this.addressManager = await this.initAddressManager(address);\r\n        await this.saveTransactions(address);\r\n\r\n        return this.addressManager;\r\n    }\r\n\r\n    async initAddressManager(address) {\r\n\r\n        let addressManager = null;\r\n\r\n        let isContract = await this.isContract(address);\r\n        let isVerified = await this.isVerifiedContract(address);\r\n        let contractName = await this.getContractName(address);\r\n        let accountName = await this.getAccountName(address);\r\n\r\n        console.log(\"isContract: \" + isContract);\r\n        console.log(\"isVerified: \" + isVerified);\r\n        console.log(\"contractName: \" + contractName);\r\n        console.log(\"accountName: \" + accountName);\r\n        console.log(\"address: \" + address);\r\n\r\n        if (isContract === true) {\r\n            addressManager = new AddressManager(address, (contractName == null) ? address : contractName, \"Contract\", isVerified ? \"verified\" : \"not verified\");\r\n            this.addressLookUpMap.set(address, contractName);\r\n        } else {\r\n            addressManager = new AddressManager(address, (accountName == null) ? address : accountName, \"Account\", (accountName == null) ? \"not verified\" : \"verified by validator\");\r\n            this.addressLookUpMap.set(address, accountName);\r\n        }\r\n\r\n        return addressManager;\r\n    }\r\n\r\n    async getTransactions(adderss) {\r\n        let result = await fetch(this.URLTransactionList + adderss).then(response => response.json());\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n    async getTransactionInfo(transactionHash) {\r\n        let result = await fetch(this.URLTransactionInfo + transactionHash).then(response => response.json());\r\n        console.log(result);\r\n\r\n        return result;\r\n    }\r\n\r\n    async lookUpName(address) {\r\n        let resolvedAddress = this.addressLookUpMap.get(address);\r\n        if (typeof resolvedAddress === \"undefined\") {\r\n            let isContract = await this.isContract(address);\r\n            if (isContract) {\r\n                let contractName = await this.getContractName(address);\r\n                resolvedAddress = (contractName !== null) ? contractName : address;\r\n                this.addressLookUpMap.set(address, resolvedAddress);\r\n            } else {\r\n                let accountName = await this.getAccountName(address);\r\n                resolvedAddress = (accountName !== null) ? accountName : address;\r\n                this.addressLookUpMap.set(address, resolvedAddress);\r\n            }\r\n        }\r\n\r\n        return resolvedAddress;\r\n    }\r\n\r\n    async saveTransactions(address) {\r\n        let transactions = await this.getTransactions(address);\r\n\r\n        let length = Object.keys(transactions.result).length;\r\n        let resultArray = transactions.result;\r\n\r\n        for (let i = 0; i < length; i++) {\r\n\r\n            let transactionHash = resultArray[i].hash;\r\n\r\n            let senderAddress = resultArray[i].from;\r\n            let senderName = await this.lookUpName(senderAddress);\r\n\r\n            let receiverAddress = resultArray[i].to;\r\n            let receiverName = await this.lookUpName(receiverAddress);\r\n\r\n            let timeStamp = resultArray[i].timeStamp;\r\n            let input = resultArray[i].input;\r\n\r\n\r\n            //console.log(\"sender: \" + senderName + \", receiver: \" + receiverName);\r\n\r\n            this.addressManager.transactionMap.set(i, new Transaction(transactionHash, senderAddress, senderName, receiverAddress, receiverName, timeStamp, input));\r\n\r\n            let percent = Math.round((i + 1) * 100 / length * 100) / 100;\r\n            document.getElementById(\"p\").innerHTML = percent + \"%\";\r\n            document.getElementById(\"p\").style.width=percent+\"%\";\r\n            document.getElementById(\"loader_info\").innerHTML = \"Receiving transaction (\" + (i + 1) + \"/\" + length + \")\";\r\n            \r\n        }\r\n\r\n        //console.log(this.addressManager.getTransactionSummaryMap());\r\n        //console.log(this.addressManager.getTransactionsForAddress([\"0xaa84378fa41da83a9b6523ba46e45a664fbebfc8\",\"0xe659bc6a60ba2091c08f7df623ba6057349b6980\"]));\r\n\r\n\r\n\r\n    }\r\n\r\n    async isContract(address) {\r\n\r\n        let isContract = true;\r\n\r\n        if (address === \"\") { // special case\r\n            isContract = false;\r\n        } else {\r\n            const Web3 = require('web3');\r\n            const web3 = new Web3(new Web3.providers.HttpProvider(this.web3Url));\r\n            let result = await web3.eth.getCode(address);\r\n\r\n            if (result === \"0x\") {\r\n                isContract = false;\r\n            }\r\n        }\r\n        return isContract;\r\n    }\r\n\r\n    async isVerifiedContract(address) {\r\n        let isVerifiedContract = true;\r\n\r\n        let result = await fetch(this.URLContractSourceCode + address).then(response => response.json());\r\n\r\n        if (typeof result.result[0].ContractName === \"undefined\") {\r\n            isVerifiedContract = false;\r\n        }\r\n\r\n        return isVerifiedContract;\r\n    }\r\n\r\n    async getContractName(address) {\r\n        let result = await fetch(this.URLContractSourceCode + address).then(response => response.json());\r\n\r\n        let contractName = result.result[0].ContractName;\r\n\r\n        return (typeof contractName !== \"undefined\") ? contractName : null;\r\n    }\r\n\r\n    async getAccountName(address) {\r\n\r\n        let response = await fetch(\"https://blockexplorer.bloxberg.org/address/\" + address + \"/transactions\");\r\n        let httpText = await response.text();\r\n\r\n        let regex = '<strong class=\"mr-4 mb-2 text-dark\" title=\"[a-zA-Z0-9. ]*\">';\r\n\r\n        let result = httpText.match(regex);\r\n\r\n        let accountName = null;\r\n\r\n        if (result !== null) {\r\n            accountName = result[0].substring(43, result[0].length - 2);\r\n        }\r\n\r\n        return accountName;\r\n    }\r\n    /*\r\n    test() {\r\n\r\n        \r\n        // ISCC Base58 encoding: 0x00f71201ad85f5a189102b2a76b05434d95a204f077f99ee368d213022628ba1e4fa5686\r\n        // → Resolves to: \r\n        // Meta-ID: CCLYJLQWKidp1\r\n        // Content-ID: CT8ZSFJGhmUcM\r\n        // Data-ID: CDEZgdCTV5Tum\r\n        // Instance-ID: CR6kNU6eVKkLM\r\n        // Tophash: 22628ba1e4fa56864075e614b5930086 944d530ec775adfcc5191ed8e4b38cc6\r\n        \r\n\r\n        let data = \"0x989cda35000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002400f71201ad85f5a189102b2a76b05434d95a204f077f99ee368d213022628ba1e4fa568600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002022628ba1e4fa56864075e614b5930086944d530ec775adfcc5191ed8e4b38cc6\";\r\n\r\n        const InputDataDecoder = require('ethereum-input-data-decoder');\r\n\r\n        const abi = [{ \"type\": \"event\", \"name\": \"ISCC\", \"inputs\": [{ \"type\": \"address\", \"name\": \"actor\", \"internalType\": \"address\", \"indexed\": true }, { \"type\": \"bytes\", \"name\": \"iscc\", \"internalType\": \"bytes\", \"indexed\": false }, { \"type\": \"bytes\", \"name\": \"tophash\", \"internalType\": \"bytes\", \"indexed\": false }], \"anonymous\": false }, { \"type\": \"function\", \"stateMutability\": \"nonpayable\", \"outputs\": [], \"name\": \"declare\", \"inputs\": [{ \"type\": \"bytes\", \"name\": \"iscc\", \"internalType\": \"bytes\" }, { \"type\": \"bytes\", \"name\": \"tophash\", \"internalType\": \"bytes\" }] }];\r\n        const decoder = new InputDataDecoder(abi);\r\n        const result = decoder.decodeData(data);\r\n\r\n        console.log(result);\r\n\r\n        let bytes = \"0 247 18 1 173 133 245 161 137 - 16 43 42 118 176 84 52 217 90 - 32 79 7 127 153 238 54 141 33 - 48 34 98 139 161 228 250 86 134\";\r\n        let encodedString = \"00f71201ad85f5a189 - 102b2a76b05434d95a204f077f99ee368d213022628ba1e4fa5686\";\r\n\r\n        let array = [0,\r\n            247,\r\n            18,\r\n            1,\r\n            173,\r\n            133,\r\n            245,\r\n            161,\r\n            137,\r\n            16,\r\n            43,\r\n            42,\r\n            118,\r\n            176,\r\n            84,\r\n            52,\r\n            217,\r\n            90,\r\n            32,\r\n            79,\r\n            7,\r\n            127,\r\n            153,\r\n            238,\r\n            54,\r\n            141,\r\n            33,\r\n            48,\r\n            34,\r\n            98,\r\n            139,\r\n            161,\r\n            228,\r\n            250,\r\n            86,\r\n            134];\r\n\r\n        let base62 = require(\"base62/lib/custom\");\r\n\r\n        let charset1 = \"C23456789rB1ZEFGTtYiAaVvMmHUPWXKDNbcdefghLjkSnopRqsJuQwxyz\";\r\n        let charset2 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\r\n        charset1 = base62.indexCharset(charset1);\r\n        console.log(base62.encode(247, charset1));\r\n\r\n\r\n        let str = \"\";\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            console.log(i)\r\n            if (i !== 0 && i % 8 == 0) {\r\n                str = str + \"-\";\r\n            }\r\n            str = str + base62.encode(array[i], charset1);\r\n        }\r\n\r\n        console.log(\"String\");\r\n        console.log(str);\r\n\r\n        console.log(this.byteToHex(array));\r\n    }\r\n\r\n    byteToHex(byteArray) {\r\n        return Array.from(byteArray, function (byte) {\r\n            return ('0' + (byte & 0xFF).toString(16)).slice(-2);\r\n        }).join('');\r\n    }\r\n    */\r\n}\r\n\r\nexport default DataFetcher;","import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport '../../../bootstrap.min.css';\r\nimport DataFetcher from './DataFetcher';\r\n\r\nclass TableCreator extends Component {\r\n\r\n  //url_website = 'https://internet-sicherheit.github.io/visualisation_of_bloxberg_network/#/visualisation_of_bloxberg_network/AddressViewer?address=';\r\n  url_website = 'http://localhost:3000/visualisation_of_bloxberg_network/#/visualisation_of_bloxberg_network/AddressViewer?address=';\r\n  url_bloxberg_tx = 'https://blockexplorer.bloxberg.org/tx/';\r\n  url_bloxberg_addr = 'https://blockexplorer.bloxberg.org/address/';\r\n\r\n  MODE_SUMMARY = \"mode_transaction_summary\";\r\n  MODE_ALLTRANSACTIONS = \"mode_all_transactions\";\r\n  MODE_SELECTEDTRANSACTIONS = \"mode_selected_transactions\";\r\n\r\n  sortMode = \"asc\";\r\n  sortButton = \"sender\";\r\n\r\n  PAGE_FIRST = \"page_first\";\r\n  PAGE_LAST = \"page_last\";\r\n  PAGE_INCREASE = \"page_increase\";\r\n  PAGE_DECREASE = \"page_decrease\";\r\n\r\n  htmlCode = '';\r\n  responseObject = null;\r\n  promise = null;\r\n\r\n  transactionList = null;\r\n\r\n  mode = null;\r\n  page = 1;\r\n  pageFaktor = 100;\r\n\r\n  checkedAddresses = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"Consturctor:\")\r\n    console.log(props);\r\n\r\n    this.responseObject = new DataFetcher();\r\n    this.checkedAddresses = new Map();\r\n  }\r\n\r\n  renderData(promise) {\r\n\r\n    // Save promise localy\r\n    this.promise = promise;\r\n\r\n    // Show information of source address\r\n    document.getElementById(\"type\").innerHTML = this.promise.type;\r\n    document.getElementById(\"name\").innerHTML = '<a href=\"' + this.url_bloxberg_addr + this.promise.address + '/transactions\" target=\"_blank\">' + this.promise.name + '</a>';\r\n    document.getElementById(\"status\").innerHTML = this.promise.status;\r\n\r\n    // Show initially transaction summary of source address\r\n    this.renderTableSummary(1);\r\n  }\r\n\r\n  getMaxPages() {\r\n\r\n    let maxPages = 1;\r\n    if (this.transactionList.length !== 0) { // needed if selectedTransactions are empty\r\n      let rest = this.transactionList.length % this.pageFaktor !== 0;\r\n      maxPages = rest ? Math.floor(this.transactionList.length / this.pageFaktor) + 1 : Math.floor(this.transactionList.length / this.pageFaktor);\r\n    }\r\n    return maxPages;\r\n  }\r\n\r\n  getRowCounterStart(page) {\r\n\r\n    let rowCounterStart = (page === 1)\r\n      ? 0\r\n      : (page - 1) * this.pageFaktor;\r\n\r\n    return rowCounterStart;\r\n  }\r\n\r\n  getRowCounterEnd(page) {\r\n\r\n    let maxPages = this.getMaxPages();\r\n\r\n    let rowCounterEnd = (page === maxPages)\r\n      ? this.transactionList.length\r\n      : page * this.pageFaktor;\r\n\r\n    return rowCounterEnd;\r\n  }\r\n\r\n  renderTable(pageControl) {\r\n\r\n    //console.log(\"CHECKED ADDRESSES ARE:\");\r\n    //console.log(this.checkedAddresses);\r\n\r\n    let maxPages = this.getMaxPages();\r\n\r\n    switch (pageControl) {\r\n      case this.PAGE_INCREASE:\r\n        if (this.page < maxPages) {\r\n          this.page++;\r\n        }\r\n        break;\r\n      case this.PAGE_DECREASE:\r\n        if (this.page > 1) {\r\n          this.page--;\r\n        }\r\n        break;\r\n      case this.PAGE_FIRST:\r\n        this.page = 1;\r\n        break;\r\n      case this.PAGE_LAST:\r\n        this.page = maxPages;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    switch (this.mode) {\r\n      case this.MODE_SUMMARY:\r\n        this.renderTableSummary(this.page);\r\n        break;\r\n      case this.MODE_ALLTRANSACTIONS:\r\n        this.renderTableAllTransactions(this.page);\r\n        break;\r\n      case this.MODE_SELECTEDTRANSACTIONS:\r\n        this.renderTableSelectedTransactions(this.page, false);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  renderTableSummary(page, resetMap) {\r\n\r\n    console.log(\"Transaction Summary -->\");\r\n\r\n    this.transactionList = this.promise.getTransactionSummaryMap();\r\n    //this.transactionList = this.testTableSummary();\r\n\r\n    if(this.sortButton === \"sender\") {\r\n      this.transactionList = this.promise.sortByAddress(this.sortMode, this.sortButton, this.transactionList);\r\n    }\r\n    if(this.sortButton === \"receiver\") {\r\n      this.transactionList = this.promise.sortByAddress(this.sortMode, this.sortButton, this.transactionList);\r\n    }\r\n    if(this.sortButton === \"txcount\") {\r\n      this.transactionList = this.promise.sortByTxCount(this.sortMode, this.transactionList);\r\n    }\r\n\r\n    this.mode = this.MODE_SUMMARY;\r\n    this.page = (page === 1) ? this.page = 1 : page;\r\n    this.setPageButtons();\r\n\r\n    this.htmlCode = \"\";\r\n\r\n    this.checkedAddresses = (resetMap) ? new Map() : this.checkedAddresses;\r\n\r\n    this.addToHTMLCode(\r\n      '<table class=\"table\" style=\"table-layout:fixed; word-wrap:break-word;\">'\r\n      + '<thead class=\"thead-dark\">'\r\n      + '<tr>'\r\n    );\r\n\r\n    this.addToHTMLCode('<th scope=\"col\">#</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"sender\">Sender</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"receiver\">Receiver</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"txcount\">TxCount</th>');\r\n\r\n    this.addToHTMLCode(\r\n      '</tr>'\r\n      + '</thead>'\r\n      + '<tbody>');\r\n\r\n    let rowCounterEnd = this.getRowCounterEnd(page);\r\n    let rowCounterStart = this.getRowCounterStart(page);\r\n\r\n    console.log(\"        MaxPages: \" + this.getMaxPages());\r\n    console.log(\"        Page: \" + page);\r\n    console.log(\"        Start: \" + rowCounterStart);\r\n    console.log(\"        End: \" + rowCounterEnd);\r\n\r\n    for (rowCounterStart; rowCounterStart < rowCounterEnd; rowCounterStart++) {\r\n      let value = this.transactionList[rowCounterStart];\r\n      //console.log(\"        \" + rowCounterStart + \", \" + value.senderName + \", \" + value.receiverName + \", \" + value.txCount);\r\n\r\n      let isChecked = (typeof this.checkedAddresses.get(value.senderAddress) === 'undefined')\r\n                      ? ''\r\n                      : 'checked';\r\n\r\n      this.addToHTMLCode(\r\n        '<tr id=\"' + value.senderAddress + '\">'\r\n        + '<th scope=\"row\"><input class=\"checkBox\" type=\"checkbox\" value=\"' + value.senderAddress + '\" ' + isChecked + ' /></th>'\r\n        + '<td><a href=\"' + this.url_website + value.senderAddress + '\" target=\"_blank\">' + value.senderName + '</a></td>'\r\n        + '<td><a href=\"' + this.url_website + value.receiverAddress + '\" target=\"_blank\">' + value.receiverName + '</a></td>'\r\n        + '<td>' + value.txCount + '</td>'\r\n        + '</tr>'\r\n      );\r\n    }\r\n\r\n    this.addToHTMLCode(\r\n      '</tbody>'\r\n      + '</table>'\r\n    );\r\n\r\n    document.getElementById(\"entryCount\").innerHTML = this.transactionList.length + \" entries\";\r\n    document.getElementById(\"table\").innerHTML = this.htmlCode;\r\n\r\n    for (let [key, value] of this.checkedAddresses) {\r\n      let trRow = document.getElementById(value);\r\n      if(trRow !== null) {\r\n        trRow.style.backgroundColor=\"lightgray\";\r\n      }\r\n    }\r\n\r\n    this.addListenerToCheckBoxes();\r\n\r\n    this.addTableSortButtonSender();\r\n    this.addTableSortButtonReceiver();\r\n    this.addTableSortButtonTxCount();\r\n  }\r\n\r\n  renderTableAllTransactions(page) {\r\n\r\n    console.log(\"AllTransactions -->\");\r\n\r\n    this.transactionList = this.promise.getAllTransactions();\r\n\r\n    if(this.sortButton === \"sender\") {\r\n      this.transactionList = this.promise.sortByAddress(this.sortMode, this.sortButton, this.transactionList);\r\n    }\r\n    if(this.sortButton === \"receiver\") {\r\n      this.transactionList = this.promise.sortByAddress(this.sortMode, this.sortButton, this.transactionList);\r\n    }\r\n    if(this.sortButton === \"timestamp\") {\r\n      this.transactionList = this.promise.sortByTimeStamp(this.sortMode, this.transactionList);\r\n    }\r\n\r\n    this.mode = this.MODE_ALLTRANSACTIONS;\r\n    this.page = (page === 1) ? this.page = 1 : page;\r\n    this.setPageButtons();\r\n\r\n    this.htmlCode = \"\";\r\n\r\n    this.checkedAddresses = new Map();\r\n\r\n    this.addToHTMLCode(\r\n      '<table class=\"table\" style=\"table-layout:fixed; word-wrap:break-word;\">'\r\n      + '<thead class=\"thead-dark\">'\r\n      + '<tr>'\r\n    );\r\n\r\n    this.addToHTMLCode('<th scope=\"col\">#</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"sender\">Sender</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"receiver\">Receiver</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"timestamp\">TimeStamp</th>');\r\n    this.addToHTMLCode('<th scope=\"col\">Input</th>');\r\n\r\n    this.addToHTMLCode(\r\n      '</tr>'\r\n      + '</thead>'\r\n      + '<tbody>');\r\n\r\n    let rowCounterEnd = this.getRowCounterEnd(page);\r\n    let rowCounterStart = this.getRowCounterStart(page);\r\n\r\n    console.log(\"        MaxPages: \" + this.getMaxPages());\r\n    console.log(\"        Page: \" + page);\r\n    console.log(\"        Start: \" + rowCounterStart);\r\n    console.log(\"        End: \" + rowCounterEnd);\r\n\r\n    for (rowCounterStart; rowCounterStart < rowCounterEnd; rowCounterStart++) {\r\n      let value = this.transactionList[rowCounterStart];\r\n      //console.log(\"        \" + rowCounterStart + \", \" + value.senderName + \", \" + value.receiverName + \", \" + value.timeStamp + \", \" + value.input);\r\n      this.addToHTMLCode(\r\n        '<tr>'\r\n        + '<th scope=\"row\">' + (rowCounterStart + 1) + '</th>'\r\n        + '<td><a href=\"' + this.url_website + value.senderAddress + '\" target=\"_blank\">' + value.senderName + '</a></td>'\r\n        + '<td><a href=\"' + this.url_website + value.receiverAddress + '\" target=\"_blank\">' + value.receiverName + '</a></td>'\r\n        + '<td><a href=\"' + this.url_bloxberg_tx + value.transactionHash + '/internal_transactions\" target=\"_blank\">' + this.convertTime(parseInt(value.timeStamp)) + '</a></td>'\r\n        + '<td>' + value.input + '</td>'\r\n        + '</tr>'\r\n      );\r\n    }\r\n\r\n    this.addToHTMLCode(\r\n      '</tbody>'\r\n      + '</table>'\r\n    );\r\n\r\n    document.getElementById(\"entryCount\").innerHTML = this.transactionList.length + \" entries\";\r\n    document.getElementById(\"table\").innerHTML = this.htmlCode;\r\n\r\n    this.addTableSortButtonSender();\r\n    this.addTableSortButtonReceiver();\r\n    this.addTableSortButtonTimeStamp();\r\n  }\r\n\r\n  renderTableSelectedTransactions(page) {\r\n\r\n    console.log(\"SelectedTransactions -->\");\r\n\r\n    this.transactionList = this.promise.getTransactionsForAddress(this.checkedAddresses);\r\n\r\n    if(this.sortButton === \"sender\") {\r\n      this.transactionList = this.promise.sortByAddress(this.sortMode, this.sortButton, this.transactionList);\r\n    }\r\n    if(this.sortButton === \"receiver\") {\r\n      this.transactionList = this.promise.sortByAddress(this.sortMode, this.sortButton, this.transactionList);\r\n    }\r\n    if(this.sortButton === \"timestamp\") {\r\n      this.transactionList = this.promise.sortByTimeStamp(this.sortMode, this.transactionList);\r\n    }\r\n\r\n    this.mode = this.MODE_SELECTEDTRANSACTIONS;\r\n    this.page = (page === 1) ? this.page = 1 : page;\r\n    this.setPageButtons();\r\n\r\n    this.htmlCode = \"\";\r\n\r\n    this.addToHTMLCode(\r\n      '<table class=\"table\" style=\"table-layout:fixed; word-wrap:break-word;\">'\r\n      + '<thead class=\"thead-dark\">'\r\n      + '<tr>'\r\n    );\r\n\r\n    this.addToHTMLCode('<th scope=\"col\">#</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"sender\">Sender</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"receiver\">Receiver</th>');\r\n    this.addToHTMLCode('<th scope=\"col\" id=\"timestamp\">TimeStamp</th>');\r\n    this.addToHTMLCode('<th scope=\"col\">Input</th>');\r\n\r\n    this.addToHTMLCode(\r\n      '</tr>'\r\n      + '</thead>'\r\n      + '<tbody>');\r\n\r\n    let rowCounterEnd = this.getRowCounterEnd(page);\r\n    let rowCounterStart = this.getRowCounterStart(page);\r\n\r\n    console.log(\"        MaxPages: \" + this.getMaxPages());\r\n    console.log(\"        Page: \" + page);\r\n    console.log(\"        Start: \" + rowCounterStart);\r\n    console.log(\"        End: \" + rowCounterEnd);\r\n\r\n\r\n    if (typeof this.checkedAddresses.length === 'undefined') {\r\n      for (rowCounterStart; rowCounterStart < rowCounterEnd; rowCounterStart++) {\r\n        let value = this.transactionList[rowCounterStart];\r\n        //console.log(\"        \" + rowCounterStart + \", \" + value.senderName + \", \" + value.receiverName + \", \" + value.timeStamp + \", \" + value.input);\r\n        this.addToHTMLCode(\r\n          '<tr>'\r\n          + '<th scope=\"row\">' + (rowCounterStart + 1) + '</th>'\r\n          + '<td><a href=\"' + this.url_website + value.senderAddress + '\" target=\"_blank\">' + value.senderName + '</a></td>'\r\n          + '<td><a href=\"' + this.url_website + value.receiverAddress + '\" target=\"_blank\">' + value.receiverName + '</a></td>'\r\n          + '<td><a href=\"' + this.url_bloxberg_tx + value.transactionHash + '/internal_transactions\" target=\"_blank\">' + this.convertTime(parseInt(value.timeStamp)) + '</a></td>'\r\n          + '<td>' + value.input + '</td>'\r\n          + '</tr>'\r\n        );\r\n      }\r\n    }\r\n\r\n    this.addToHTMLCode(\r\n      '</tbody>'\r\n      + '</table>'\r\n    );\r\n\r\n    document.getElementById(\"entryCount\").innerHTML = this.transactionList.length + \" entries\";\r\n    document.getElementById(\"table\").innerHTML = this.htmlCode;\r\n\r\n    this.addTableSortButtonSender();\r\n    this.addTableSortButtonReceiver();\r\n    this.addTableSortButtonTimeStamp();\r\n  }\r\n\r\n  addToHTMLCode(code) {\r\n    this.htmlCode = this.htmlCode + code;\r\n  }\r\n\r\n  setPageButtons() {\r\n    let pageButtons = document.getElementsByClassName(\"pageButton\");\r\n    for (let i = 0; i < pageButtons.length; i++) {\r\n      pageButtons[i].innerHTML = \"Page \" + this.page;\r\n    }\r\n  }\r\n\r\n  addListenerToCheckBoxes() {\r\n    let checkBoxes = document.getElementsByClassName(\"checkBox\");\r\n    for (let i = 0; i < checkBoxes.length; i++) {\r\n      checkBoxes[i].addEventListener(\"change\", (event) => {\r\n        if (event.currentTarget.checked) {\r\n          this.checkedAddresses.set(event.currentTarget.value, event.currentTarget.value);\r\n          document.getElementById(event.currentTarget.value).style.backgroundColor = \"lightgray\";\r\n        } else {\r\n          this.checkedAddresses.delete(event.currentTarget.value);\r\n          document.getElementById(event.currentTarget.value).style.backgroundColor = \"white\";\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  addTableSortButtonSender() {\r\n    let senderTableHead = document.getElementById(\"sender\");\r\n    senderTableHead.addEventListener(\"click\", (event) => {\r\n      this.sortButton = \"sender\";\r\n\r\n      if(this.sortMode === \"asc\") {\r\n        this.sortMode = \"desc\";\r\n      } else {\r\n        this.sortMode = \"asc\";\r\n      }\r\n\r\n      if(this.mode === this.MODE_SUMMARY) {\r\n        this.renderTableSummary(this.page, true);\r\n      }\r\n      if(this.mode === this.MODE_ALLTRANSACTIONS) {\r\n        this.renderTableAllTransactions(this.page);\r\n      }\r\n      if(this.mode === this.MODE_SELECTEDTRANSACTIONS) {\r\n        this.renderTableSelectedTransactions(this.page);\r\n      }\r\n    });\r\n  }\r\n  addTableSortButtonReceiver() {\r\n    let receiverTableHead = document.getElementById(\"receiver\");\r\n    receiverTableHead.addEventListener(\"click\", (event) => {\r\n      this.sortButton = \"receiver\";\r\n\r\n      if(this.sortMode === \"asc\") {\r\n        this.sortMode = \"desc\";\r\n      } else {\r\n        this.sortMode = \"asc\";\r\n      }\r\n\r\n      if(this.mode === this.MODE_SUMMARY) {\r\n        this.renderTableSummary(this.page, true);\r\n      }\r\n      if(this.mode === this.MODE_ALLTRANSACTIONS) {\r\n        this.renderTableAllTransactions(this.page);\r\n      }\r\n      if(this.mode === this.MODE_SELECTEDTRANSACTIONS) {\r\n        this.renderTableSelectedTransactions(this.page);\r\n      }\r\n    });\r\n  }\r\n  addTableSortButtonTxCount() {\r\n    let txcountTableHead = document.getElementById(\"txcount\");\r\n    txcountTableHead.addEventListener(\"click\", (event) => {\r\n      this.sortButton = \"txcount\";\r\n\r\n      if(this.sortMode === \"asc\") {\r\n        this.sortMode = \"desc\";\r\n      } else {\r\n        this.sortMode = \"asc\";\r\n      }\r\n\r\n      if(this.mode === this.MODE_SUMMARY) {\r\n        this.renderTableSummary(this.page, true);\r\n      }\r\n      if(this.mode === this.MODE_ALLTRANSACTIONS) {\r\n        this.renderTableAllTransactions(this.page);\r\n      }\r\n      if(this.mode === this.MODE_SELECTEDTRANSACTIONS) {\r\n        this.renderTableSelectedTransactions(this.page);\r\n      }\r\n    });\r\n  }\r\n  addTableSortButtonTimeStamp() {\r\n    let timeStampTableHead = document.getElementById(\"timestamp\");\r\n    timeStampTableHead.addEventListener(\"click\", (event) => {\r\n      this.sortButton = \"timestamp\";\r\n\r\n      if(this.sortMode === \"asc\") {\r\n        this.sortMode = \"desc\";\r\n      } else {\r\n        this.sortMode = \"asc\";\r\n      }\r\n\r\n      if(this.mode === this.MODE_SUMMARY) {\r\n        this.renderTableSummary(this.page, true);\r\n      }\r\n      if(this.mode === this.MODE_ALLTRANSACTIONS) {\r\n        this.renderTableAllTransactions(this.page);\r\n      }\r\n      if(this.mode === this.MODE_SELECTEDTRANSACTIONS) {\r\n        this.renderTableSelectedTransactions(this.page);\r\n      }\r\n    });\r\n  }\r\n\r\n  convertTime(timeStamp) {\r\n    let date = new Date(timeStamp * 1000);\r\n\r\n    let day = (date.getDate() < 10) ? \"0\" + date.getDate() : date.getDate();\r\n    let month = (date.getMonth() + 1 < 10) ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1;\r\n    let year = date.getFullYear();\r\n\r\n    let hours = (date.getHours() < 10) ? \"0\" + date.getHours() : date.getHours();\r\n    let minutes = (date.getMinutes() < 10) ? \"0\" + date.getMinutes() : date.getMinutes();\r\n    let seconds = (date.getSeconds() < 10) ? \"0\" + date.getSeconds() : date.getSeconds();\r\n\r\n    let timeString = day + \".\" + month + \".\" + year + \", \" + hours + \":\" + minutes + \":\" + seconds;\r\n\r\n    return timeString;\r\n}\r\n\r\n  scrollAnimation() {\r\n    document.getElementById(\"table_window\").scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"start\",\r\n      inline: \"nearest\"\r\n    });\r\n  }\r\n\r\n  showInformation(show) {\r\n    if (show === true) {\r\n      let infoElements = document.getElementsByClassName(\"info\");\r\n      for (let i = 0; i < infoElements.length; i++) {\r\n        infoElements[i].style.display = \"table-row\";\r\n      }\r\n    } else {\r\n      let infoElements = document.getElementsByClassName(\"info\");\r\n      for (let i = 0; i < infoElements.length; i++) {\r\n        infoElements[i].style.display = \"none\";\r\n      }\r\n    }\r\n  }\r\n  showLoader(show) {\r\n    if (show === true) {\r\n      document.getElementById(\"loader_window\").style.display = \"block\";\r\n    } else {\r\n      document.getElementById(\"loader_window\").style.display = \"none\";\r\n      document.getElementById(\"p\").style.width = \"0%\";\r\n      document.getElementById(\"p\").innerHTML = \"0.0%\";\r\n      document.getElementById(\"loader_info\").innerHTML = \"\";\r\n    }\r\n  }\r\n  showTable(show) {\r\n    if (show === true) {\r\n      document.getElementById(\"table_window\").style.display = \"block\";\r\n    } else {\r\n      document.getElementById(\"table_window\").style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  //componentWillMount() {\r\n  //}\r\n\r\n  componentDidMount() {\r\n\r\n    this.showInformation(false);\r\n    this.showLoader(true);\r\n    this.showTable(false);\r\n    this.promise = this.responseObject.fetchData(this.props.address);\r\n    this.promise.then((promise) => {\r\n      this.showLoader(false);\r\n      this.showInformation(true);\r\n      this.showTable(true);\r\n      this.renderData(promise);\r\n      this.scrollAnimation();\r\n    });\r\n\r\n\r\n  }\r\n\r\n  componentWillUpdate(nextProps) {\r\n    this.showInformation(false);\r\n    this.showLoader(true);\r\n    this.showTable(false);\r\n    this.promise = this.responseObject.fetchData(nextProps.address);\r\n    this.promise.then((promise) => {\r\n      this.showLoader(false);\r\n      this.showInformation(true);\r\n      this.showTable(true);\r\n      this.renderData(promise);\r\n      this.scrollAnimation();\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"TableCreator\">\r\n        <div id=\"links\">\r\n          <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTableSummary(1, true)}>Summary</button>\r\n          <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTableAllTransactions(1)}>All transactions</button>\r\n          <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTableSelectedTransactions(1)}>Selected transactions</button>\r\n        </div>\r\n        <table class=\"page_control\">\r\n          <tbody>\r\n            <tr>\r\n              <td id=\"entryCount\"></td>\r\n              <td id=\"paging\">\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_FIRST)}>First</button>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_DECREASE)}>&lt;</button>\r\n                <button class=\"btn btn-outline-secondary pageButton\" type=\"button\" id=\"button-addon2\">Page 1</button>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_INCREASE)}>&gt;</button>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_LAST)}>Last</button>\r\n              </td>\r\n              <td>\r\n                <p id=\"placeholder\">placeholder</p>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div id=\"table\"></div>\r\n        <table class=\"page_control\">\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_FIRST)}>First</button>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_DECREASE)}>&lt;</button>\r\n                <button class=\"btn btn-outline-secondary pageButton\" type=\"button\" id=\"button-addon2\">Page 1</button>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_INCREASE)}>&gt;</button>\r\n                <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => this.renderTable(this.PAGE_LAST)}>Last</button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableCreator;","import React, { Component } from 'react';\r\nimport './styles.css';\r\nimport '../../../bootstrap.min.css';\r\nimport TableCreator from './TableCreator';\r\nimport queryString from 'query-string';\r\n\r\nclass AddressViewer extends Component {\r\n\r\n  state = {\r\n    address: null\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n    const regex = \"^0x[a-fA-F0-9]{40}$\";\r\n    const query = this.props.location.search;\r\n\r\n    console.log(query);\r\n\r\n    if(query !== '') {\r\n      const values = queryString.parse(this.props.location.search);\r\n      const addr = values.address;\r\n      if(addr.match(regex)) {\r\n        this.setState({ address: addr });\r\n        document.getElementById(\"address_input\").value = addr;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    let table = (this.state.address !== null) ? <TableCreator address={this.state.address} /> : null;\r\n\r\n    return (\r\n      <div className=\"AddressViewer\">\r\n\r\n        <div class=\"window\" id=\"search_window\">\r\n          <table id=\"search_table\">\r\n            <tbody>\r\n            <tr>\r\n              <td>\r\n                <label class=\"black_label\">Address</label>\r\n              </td>\r\n              <td>                \r\n                <div class=\"input-group-append\">\r\n                  <input type=\"text\" id=\"address_input\" class=\"form-control form-control-lg\" placeholder=\"Enter address...\" autoFocus/>\r\n                  <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\" onClick={() => {\r\n\r\n                    let address = document.getElementById(\"address_input\").value;\r\n\r\n                    const regex = \"^0x[a-fA-F0-9]{40}$\";\r\n                    if(address !== \"\") {\r\n                      if(address.match(regex)) {\r\n                        console.log(\"address -> \" + address);\r\n                        this.setState({ address: address });\r\n                      } else {\r\n                        window.alert(\"Invalid address.\");\r\n                      }\r\n                    } else {\r\n                      window.alert(\"Inputfield is empty.\");\r\n                    }\r\n\r\n                  }}>Search</button>\r\n              </div>\r\n              </td>\r\n            </tr>\r\n            <tr class=\"info\">\r\n              <td>\r\n                <label class=\"black_label\">Type</label>\r\n              </td>\r\n              <td>\r\n                <label id=\"type\"></label>\r\n              </td>\r\n            </tr>\r\n            <tr class=\"info\">\r\n              <td>\r\n                <label class=\"black_label\">Name</label>\r\n              </td>\r\n              <td>\r\n                <label id=\"name\"></label>\r\n              </td>\r\n            </tr>\r\n            <tr class=\"info\">\r\n              <td>\r\n                <label class=\"black_label\">Status</label>\r\n              </td>\r\n              <td>\r\n                <label id=\"status\"></label>\r\n              </td>\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div class=\"window\" id=\"loader_window\">\r\n          <div id=\"pb\">\r\n            <div id=\"p\">\r\n              0.0%\r\n            </div>\r\n          </div>\r\n          <label id=\"loader_info\"></label>\r\n        </div>\r\n\r\n        <div class=\"window\" id=\"table_window\">\r\n          {table}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default AddressViewer;","import React from 'react';\r\n\r\nclass DataCollector extends React.Component {\r\n\r\n    transactionMap = null;\r\n    tempMap = null;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.transactionMap = new Map();\r\n        this.tempMap = new Map();\r\n    }\r\n\r\n    async getData(page, offset, depth) {\r\n\r\n        this.setLoadingbar(0);\r\n\r\n        this.transactionMap = new Map();\r\n        this.tempMap = new Map();\r\n\r\n        // get contract list\r\n        console.log(\"Function - getContractList(page, offsett):\");\r\n        let contractList = await this.getContractList(page, offset);\r\n        console.log(\"CONTRACTLIST:\");\r\n        console.log(contractList);\r\n\r\n        // get transactions from contract list\r\n        console.log(\"Function - getTransactionFromContractList(contractList):\");\r\n        await this.getTransactionFromContractList(contractList);\r\n        console.log(\"TRANSACTIONMAP BEFORE DEEEP SEARCH:\");\r\n        console.log(this.transactionMap);\r\n\r\n        // search deeper into network\r\n        console.log(\"Function - deepSearch(depth, round):\");\r\n        this.tempMap = await this.copyMap(this.transactionMap);\r\n        if (depth !== 0) {\r\n            for (let round = 1; round <= depth; round++) {\r\n                await this.deepSearch(depth, round);\r\n            }\r\n            console.log(\"TRANSACTIONMAP AFTER DEEEP SEARCH:\");\r\n            console.log(this.transactionMap);\r\n        }\r\n\r\n        document.getElementById(\"loading_informaiton\").innerHTML = \"Loading...\";\r\n\r\n        return this.convertMapToArray(this.transactionMap);\r\n    }\r\n\r\n    async getContractList(page, offset) {\r\n\r\n        const url = 'https://blockexplorer.bloxberg.org/api/api?module=contract&action=listcontracts&page=' + page + '&offset=' + offset;\r\n\r\n        let contractList = await fetch(url).then(response => response.json());\r\n\r\n        return contractList.result;\r\n    }\r\n\r\n    async getTransactionFromContractList(contractList) {\r\n\r\n        console.log(\"Searching for contract transactions:\");\r\n        \r\n        let counter = 1;\r\n        for (const contract of contractList) {\r\n            let url = 'https://blockexplorer.bloxberg.org/api/api?module=account&action=txlist&address=';\r\n            url = url + contract.Address;\r\n\r\n            let arrays = await fetch(url).then(json => json.json());\r\n\r\n            let length = Object.keys(arrays.result).length;\r\n            let array = arrays.result;\r\n\r\n            console.log(\"   Recived \" + length + \" Transaction entries.\");\r\n\r\n            for (let i = 0; i < length; i++) {\r\n\r\n                if (array[i].from !== \"\" && array[i].to !== \"\" && !this.mapContains(this.transactionMap, array[i].from, array[i].to)) {\r\n                    this.transactionMap.set(\r\n                        array[i].from + array[i].to,\r\n                        {\r\n                            source: array[i].from,\r\n                            target: array[i].to,\r\n                            sourceType: ((await this.isContract(array[i].from)) ? \"Contract\" : \"Account\"),\r\n                            targetType: \"Contract\"\r\n                        }\r\n                    )\r\n                    console.log(\"      Transaction entry number \" + (i + 1) + \" added.\");\r\n                }\r\n            }\r\n\r\n            let p = Math.round(counter * 100 / contractList.length * 100) / 100;\r\n            this.setLoadingbar(p);\r\n\r\n            counter++;\r\n        }\r\n        \r\n        this.setLoadingbar(0);\r\n    }\r\n\r\n    async deepSearch(depth, round) {\r\n\r\n        let map = this.copyMap(this.tempMap);\r\n        this.tempMap = new Map();\r\n\r\n        let counter = 1;\r\n\r\n        console.log(\"DEEP SEARCH ROUND \" + round + \"/\" + depth);\r\n\r\n        for (const entry of map) {\r\n\r\n            console.log(\"   Look up for map entry \" + counter + \" of \" + map.size);\r\n\r\n            document.getElementById(\"loading_informaiton\").innerHTML = \"Address look up (\" + counter + \"/\" + map.size + \")<br>Depth search level (\" + round + \"/\" + depth + \")\";\r\n\r\n            let url = 'https://blockexplorer.bloxberg.org/api/api?module=account&action=txlist&address=';\r\n            url = url + entry[1].source;\r\n\r\n            console.log(\"      Searching transactions for address \" + entry[1].source + \" ...\");\r\n\r\n            let arrays = await fetch(url).then(json => json.json());\r\n\r\n            let length = Object.keys(arrays.result).length;\r\n            let array = arrays.result;\r\n\r\n            console.log(\"         Recived \" + length + \" Transaction entries.\");\r\n\r\n            let addCounter = 1;\r\n            for (let i = 0; i < length; i++) {\r\n\r\n                if (array[i].to !== entry[1].source) {\r\n                    let temp = array[i].from;\r\n                    array[i].from = array[i].to;\r\n                    array[i].to = temp;\r\n                }\r\n\r\n                if (array[i].from !== \"\" && array[i].to !== \"\" && !this.mapContains(this.transactionMap, array[i].from, array[i].to)) {\r\n\r\n                    this.transactionMap.set(\r\n                        array[i].from + array[i].to,\r\n                        {\r\n                            source: array[i].from,\r\n                            target: array[i].to,\r\n                            sourceType: (await this.isContract(array[i].from) ? \"Contract\" : \"Account\"),\r\n                            targetType: (await this.isContract(array[i].to) ? \"Contract\" : \"Account\")\r\n                        }\r\n                    );\r\n                    this.tempMap.set(\r\n                        array[i].from + array[i].to,\r\n                        {\r\n                            source: array[i].from,\r\n                            target: array[i].to,\r\n                            sourceType: (await this.isContract(array[i].from) ? \"Contract\" : \"Account\"),\r\n                            targetType: (await this.isContract(array[i].to) ? \"Contract\" : \"Account\")\r\n                        }\r\n                    );\r\n                    console.log(\"            Transaction entry number \" + addCounter + \" added.\");\r\n\r\n                    let p = Math.round(addCounter * 100 / length * 100) / 100;\r\n                    this.setLoadingbar(p);\r\n                }\r\n                addCounter++;\r\n            }\r\n            addCounter = 1;\r\n            counter++;\r\n\r\n            this.setLoadingbar(0);\r\n        }\r\n\r\n        console.log(\"----- MAP for round \" + round + \" -----\");\r\n        console.log(map);\r\n        console.log(\"---------------------------\");\r\n    }\r\n\r\n    async isContract(address) {\r\n\r\n        let isContract = true;\r\n\r\n        const Web3 = require('web3');\r\n        const web3 = new Web3(new Web3.providers.HttpProvider('https://core.bloxberg.org/'));\r\n        let result = await web3.eth.getCode(address);\r\n\r\n        if(result === \"0x\") {\r\n            isContract = false;\r\n        }\r\n\r\n        return isContract;\r\n    }\r\n\r\n    convertMapToArray(map) {\r\n        let array = [];\r\n\r\n        map.forEach((value, key) => {\r\n            array.push({ source: value.source, target: value.target, sourceType: value.sourceType, targetType: value.targetType });\r\n        });\r\n\r\n        return array;\r\n    }\r\n\r\n    copyMap(sourceMap) {\r\n        let map = new Map();\r\n\r\n        for (const entry of sourceMap) {\r\n            map.set(entry[1].source + entry[1].target, { source: entry[1].source, target: entry[1].target, sourceType: entry[1].sourceType, targetType: entry[1].targetType });\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    mapContains(map, x, y) {\r\n        return map.has(x + y) || map.has(y + x);\r\n    }\r\n\r\n    setLoadingbar(prozent) {\r\n        document.getElementById(\"progress\").style.width = prozent + \"%\";\r\n        document.getElementById(\"progress\").innerHTML = prozent + \"%\";\r\n    }\r\n\r\n}\r\n\r\nexport default DataCollector;","import React, {Component} from 'react';\r\nimport * as d3 from 'd3';\r\nimport './styles.css';\r\nimport DataCollector from './DataCollector';\r\n\r\nclass GraphCreator extends Component {\r\n\r\n    responseObject = null;\r\n    zoomEnable = true;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"Consturctor:\")\r\n        console.log(props);\r\n        this.responseObject = new DataCollector();\r\n    }\r\n\r\n    createGraph(promise) {\r\n        console.log(\"Function - createGraph():\");\r\n\r\n        //let url_website = 'https://internet-sicherheit.github.io/visualisation_of_bloxberg_network/#/visualisation_of_bloxberg_network/AddressViewer?address=';\r\n        let url_website = 'http://localhost:3000/visualisation_of_bloxberg_network/#/visualisation_of_bloxberg_network/AddressViewer?address=';\r\n\r\n        let graphBoxHeight = window.innerHeight - document.getElementById(\"address_information\").offsetHeight;\r\n        document.getElementById(\"graph_box\").style.height = graphBoxHeight + \"px\";\r\n\r\n        let height = graphBoxHeight;\r\n        let width = window.innerWidth;\r\n\r\n        console.log(\"PROMISE:\");\r\n        console.log(promise);\r\n\r\n        let links = promise;\r\n\r\n        console.log(\"LINKS:\");\r\n        console.log(links);\r\n\r\n        // create empty nodes array\r\n        let nodes = {};\r\n\r\n        // compute nodes from links data\r\n        links.forEach(function (link) {\r\n            link.source = nodes[link.source] ||\r\n                (nodes[link.source] = { nodeAddress: link.source, source: link.source, target: link.target, typeSource: link.sourceType, typeTarget: link.targetType });\r\n            link.target = nodes[link.target] ||\r\n                (nodes[link.target] = { nodeAddress: link.target, source: link.source, target: link.target, typeSource: link.sourceType, typeTarget: link.targetType });\r\n        });\r\n\r\n        console.log(\"NODES:\");\r\n        console.log(nodes);\r\n\r\n        let svgWidth = document.getElementById(\"address_information\").offsetWidth - 2;\r\n        let svgHeight = height - 20;\r\n\r\n        let zoom = d3.behavior.zoom().on(\"zoom\", updateZoom);\r\n\r\n        document.getElementById(\"container\").innerHTML = \"\";\r\n        // add a SVG to the body for our viz\r\n        let svg = d3.select('#container').append('svg')\r\n            .attr('width', svgWidth)\r\n            .attr('height', svgHeight)\r\n            .style(\"cursor\", \"move\")\r\n            .call(zoom)\r\n            .append(\"g\");\r\n\r\n\r\n        // use the force\r\n        let force = d3.layout.force() //build the layout\r\n            .size([svgWidth, svgHeight]) //specified earlier\r\n            .nodes(d3.values(nodes)) //add nodes\r\n            .links(links) //add links\r\n            .on(\"tick\", tick) //what to do\r\n            .linkDistance(300) //set for proper svg size\r\n            .charge(function (d) {\r\n                var charge = -200;\r\n                if (d.index === 0) charge = 2.5 * charge;\r\n                return charge;\r\n            })\r\n            .start(); //kick the party off!\r\n\r\n        // add the links\r\n        let link = svg.selectAll('.link')\r\n            .data(links)\r\n            .enter().append('line')\r\n            .attr('class', 'link');\r\n\r\n        // add the nodes\r\n        let node = svg.selectAll('.node')\r\n            .data(force.nodes()) //add\r\n            .enter().append('circle')\r\n            .style(\"cursor\", \"auto\")\r\n            .style(\"fill\", function (d) {\r\n                if (d.nodeAddress === d.source) {\r\n                    if (d.typeSource === \"Contract\") {\r\n                        return \"orange\";\r\n                    }\r\n                }\r\n                if (d.nodeAddress === d.target) {\r\n                    if (d.typeTarget === \"Contract\") {\r\n                        return \"orange\";\r\n                    }\r\n                }\r\n            })\r\n            .attr('class', 'node')\r\n            .attr('r', width * 0.005) //radius of circle\r\n            .on(\"click\", function (d) {\r\n                console.log(d);\r\n                if (d.nodeAddress === d.source) {\r\n                    document.getElementById(\"address_information\").innerHTML =\r\n                            \" <p class='labels'>Type:</p><p class='values'>\" + d.typeSource + \"</p>\"\r\n                            + \"<p class='labels'>Address:</p><p class='values'><a href='\"+ url_website + d.source + \"' target='_blank'>\" + d.source + \"</a></p>\";\r\n                }\r\n                if(d.nodeAddress === d.target) {\r\n                    document.getElementById(\"address_information\").innerHTML =\r\n                            \" <p class='labels'>Type:</p><p class='values'>\" + d.typeTarget + \"</p>\"\r\n                            + \"<p class='labels'>Address:</p><p class='values'><a href='\"+ url_website + d.target + \"' target='_blank'>\" + d.target + \"</a></p>\";\r\n                }\r\n            })\r\n            .on(\"mousedown\", function (d) {\r\n\r\n                console.log(\"----- Node Information -----\");\r\n                console.log(\"nodeAddress: \" + d.nodeAddress);\r\n                console.log(\"source: \" + d.source);\r\n                console.log(\"target: \" + d.target);\r\n                console.log(\"typeSource:   \" + d.typeSource);\r\n                console.log(\"typeTarget:   \" + d.typeTarget);\r\n\r\n                this.zoomEnable = false;\r\n                // console.log(\"ZoomEnabled? \" + this.zoomEnable);\r\n                d3.select('#container').select('svg').call(d3.behavior.zoom().on(\"zoom\", null));\r\n            })\r\n            .on(\"mouseup\", function () {\r\n                this.zoomEnable = true;\r\n                // console.log(\"ZoomEnabled? \" + this.zoomEnable);\r\n                d3.select('#container').select('svg').call(zoom);\r\n            })\r\n            .on(\"focus\", function () {\r\n                d3.select(this).style(\"border-color\", \"red\"); // fehlerhaft\r\n            });\r\n\r\n        function tick(e) {\r\n\r\n            node.attr('cx', function (d) { return d.x; })\r\n                .attr('cy', function (d) { return d.y; })\r\n                .call(force.drag);\r\n\r\n            link.attr('x1', function (d) { return d.source.x; })\r\n                .attr('y1', function (d) { return d.source.y; })\r\n                .attr('x2', function (d) { return d.target.x; })\r\n                .attr('y2', function (d) { return d.target.y; });\r\n        }\r\n\r\n        function updateZoom() {\r\n            svg.attr(\"transform\",\r\n                \"translate(\" + d3.event.translate + \")\"\r\n                + \" scale(\" + d3.event.scale + \")\");\r\n        }\r\n\r\n        console.log(\"Graph drawed.\");\r\n    }\r\n\r\n    timeStap() {\r\n        return Math.floor(Date.now());\r\n    }\r\n    calculationTime(startTime, endTime) {\r\n        console.log(\"Graph created in \" + (endTime - startTime) / 1000 + \" seconds.\");\r\n    }\r\n\r\n    showLoader() {\r\n        document.getElementById(\"address_information\").innerHTML = \"Select a node for node information.\";\r\n        document.getElementById(\"address_information\").style.visibility = \"hidden\";\r\n        document.getElementById(\"container\").style.visibility = \"hidden\";\r\n        document.getElementById(\"loader\").style.visibility = \"visible\";\r\n    }\r\n\r\n    hideLoader() {\r\n        document.getElementById(\"address_information\").style.visibility = \"visible\";\r\n        document.getElementById(\"container\").style.visibility = \"visible\";\r\n        document.getElementById(\"loader\").style.visibility = \"hidden\";\r\n        document.getElementById(\"progress\").style.width = \"0%\";\r\n        document.getElementById(\"progress\").innerHTML = \"0%\";\r\n    }\r\n\r\n    scrollAnimation() {\r\n        document.getElementById(\"address_information\").scrollIntoView({\r\n            behavior: \"smooth\",\r\n            block: \"start\",\r\n            inline: \"nearest\"\r\n        });\r\n    }\r\n\r\n    widthResizeListener() {\r\n        window.onresize = function () {\r\n            document.getElementsByTagName(\"svg\")[0].style.width = document.getElementById(\"address_information\").offsetWidth - 2;\r\n        };\r\n    }\r\n    componentWillMount() {\r\n        console.log(\"Component will mount.\");\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"Component did mount.\");\r\n\r\n        let startTime = this.timeStap();\r\n\r\n        this.showLoader();\r\n        this.responseObject.getData(this.props.page, this.props.offset, this.props.depth).then((promise) => {\r\n            this.hideLoader();\r\n            this.createGraph(promise);\r\n\r\n            let endTime = this.timeStap();\r\n            this.calculationTime(startTime, endTime);\r\n\r\n            this.scrollAnimation();\r\n            this.widthResizeListener();\r\n        });\r\n    }\r\n\r\n    componentWillUpdate(nextProps) {\r\n        console.log(\"Component will update.\");\r\n\r\n        let startTime = this.timeStap();\r\n\r\n        this.showLoader();\r\n        this.responseObject.getData(nextProps.page, nextProps.offset, nextProps.depth).then((promise) => {\r\n            this.hideLoader();\r\n            this.createGraph(promise);\r\n\r\n            let endTime = this.timeStap();\r\n            this.calculationTime(startTime, endTime);\r\n\r\n            this.scrollAnimation();\r\n            this.widthResizeListener();\r\n        });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\"Component did update.\");\r\n    }\r\n\r\n    render() {\r\n        return (<div id=\"container\"></div>);\r\n    }\r\n}\r\n\r\nexport default GraphCreator;","import React, {Component} from 'react';\r\nimport './styles.css';\r\nimport GraphCreator from './GraphCreator';\r\n\r\nclass VBN extends Component {\r\n\r\n    state = {\r\n      page: 0,\r\n      offset: 0,\r\n      depth: 0\r\n    };\r\n  \r\n    render() { \r\n  \r\n      let graph = (this.state.page !== 0) ? <GraphCreator page={this.state.page} offset={this.state.offset} depth={this.state.depth} /> : null;\r\n  \r\n      const maxPage = 100;\r\n      const maxOffset = 1800;\r\n      const maxDepth = 5;\r\n  \r\n      const pageSelectedValue = 2;\r\n      const offsetSelectedValue = 1;\r\n      const depthSelectedValue = 0;\r\n  \r\n      const pageSelectOptions = [];\r\n      for(let i = 1; i <= maxPage; i++) {\r\n        pageSelectOptions.push(<option key={i} value={i}>{i}</option>);\r\n      }\r\n      const offsetSelectOptions = [];\r\n      for(let i = 1; i <= maxOffset; i++) {\r\n        offsetSelectOptions.push(<option key={i} value={i}>{i}</option>);\r\n      }\r\n      const depthSelectOptions = [];\r\n      for(let i = 0; i <= maxDepth; i++) {\r\n        depthSelectOptions.push(<option key={i} value={i}>{i}</option>);\r\n      }\r\n  \r\n      return (\r\n        <div className=\"VBN\">\r\n          <div id=\"banner\">\r\n            <h1 className=\"title\">Visualisation of Bloxberg-Network</h1>\r\n          </div>\r\n          <div id=\"site_informaiton\">\r\n            <p>This website will produce a force directed d3 graph, that will visualizise the Bloxberg Network<br/>\r\n            by using the <a href=\"https://blockexplorer.bloxberg.org/api_docs\" target=\"_blank\" rel=\"noopener noreferrer\">Bloxberg RPC API</a> and the <a href=\"https://web3js.readthedocs.io/en/v1.3.0/\" target=\"_blank\" rel=\"noopener noreferrer\">Web3</a> framework for JavaScript.</p>\r\n          </div>\r\n          <div id=\"values_informaiton\">\r\n            <p id=\"text\">\r\n              <b>Page</b> represents the page number to be used for pagination.\r\n            </p>\r\n            <p id=\"text\">\r\n              <b>Offset</b> represents the maximum number of records to return when paginating.\r\n            </p>\r\n            <p id=\"text\">\r\n              <b>Depth</b> represents how deep the http requests will search into to network.\r\n            </p>\r\n          </div>\r\n          <div id=\"control\">\r\n            <label>Page:</label>\r\n            <select id=\"page_selection\" defaultValue={pageSelectedValue}>\r\n              {pageSelectOptions}\r\n            </select>\r\n            <label>Offset:</label>\r\n            <select id=\"offset_selection\" defaultValue={offsetSelectedValue}>\r\n              {offsetSelectOptions}\r\n            </select>\r\n            <label>Depth:</label>\r\n            <select id=\"depth_selection\" defaultValue={depthSelectedValue}>\r\n              {depthSelectOptions}\r\n            </select>\r\n            <input type=\"submit\" id=\"button\" value=\"Create Graph\" onClick={() => {\r\n  \r\n              let page = document.getElementById(\"page_selection\").value;\r\n              let offset = document.getElementById(\"offset_selection\").value;\r\n              let depth = document.getElementById(\"depth_selection\").value;\r\n  \r\n              console.log(\"page -> \" + page);\r\n              console.log(\"offset -> \" + offset);\r\n              console.log(\"depth -> \" + depth);\r\n  \r\n              this.setState({ page: page, offset: offset, depth: depth});\r\n              \r\n            }} />\r\n          </div>\r\n          <div id=\"loader\" style={{visibility: \"visable\"}}>\r\n            <div id=\"progressbar\">\r\n              <div id=\"progress\"></div>\r\n              <p id=\"loading_informaiton\">Loading...</p>\r\n            </div>\r\n          </div>\r\n          <div id=\"address_information\">\r\n            <p class=\"labels\">Select a node for node information.</p>\r\n          </div>\r\n          <div id=\"graph_box\">\r\n            {graph}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  \r\n  export default VBN;","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, HashRouter, Switch, Route, Link } from 'react-router-dom'; // maybe switch HashRouter to Router\r\nimport './App.css';\r\nimport AddressViewer from './modules/address_viewer/code/AddressViewer';\r\nimport VBN from './modules/vbn/code/VBN';\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter basename='/visualisation_of_bloxberg_network/'>\r\n\r\n        <div className=\"App\">\r\n\r\n        <div id=\"navigation\">\r\n              <ul id=\"nav-links\">\r\n                <Link to=\"/AddressViewer\" className=\"link\">\r\n                  <li>AddressViewer</li>\r\n                </Link>\r\n                <Link to=\"/VBN\" className=\"link\">\r\n                  <li>VBN</li>\r\n                </Link>\r\n              </ul>\r\n\r\n          </div>\r\n\r\n          <Switch>\r\n            <Route path=\"/AddressViewer\" exact component={AddressViewer} />\r\n            <Route path=\"/VBN\" exact component={VBN} />\r\n          </Switch>\r\n\r\n        </div>\r\n\r\n      </HashRouter>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}